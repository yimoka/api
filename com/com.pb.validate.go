// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: com/com.proto

package com

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StrID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StrIDMultiError, or nil if none found.
func (m *StrID) ValidateAll() error {
	return m.validate(true)
}

func (m *StrID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 8 {
		err := StrIDValidationError{
			field:  "Id",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StrIDMultiError(errors)
	}

	return nil
}

// StrIDMultiError is an error wrapping multiple validation errors returned by
// StrID.ValidateAll() if the designated constraints aren't met.
type StrIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrIDMultiError) AllErrors() []error { return m }

// StrIDValidationError is the validation error returned by StrID.Validate if
// the designated constraints aren't met.
type StrIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrIDValidationError) ErrorName() string { return "StrIDValidationError" }

// Error satisfies the builtin error interface
func (e StrIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrIDValidationError{}

// Validate checks the field values on NumID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NumIDMultiError, or nil if none found.
func (m *NumID) ValidateAll() error {
	return m.validate(true)
}

func (m *NumID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := NumIDValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NumIDMultiError(errors)
	}

	return nil
}

// NumIDMultiError is an error wrapping multiple validation errors returned by
// NumID.ValidateAll() if the designated constraints aren't met.
type NumIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumIDMultiError) AllErrors() []error { return m }

// NumIDValidationError is the validation error returned by NumID.Validate if
// the designated constraints aren't met.
type NumIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumIDValidationError) ErrorName() string { return "NumIDValidationError" }

// Error satisfies the builtin error interface
func (e NumIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumIDValidationError{}

// Validate checks the field values on StrIDIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrIDIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrIDIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StrIDInMultiError, or nil if none found.
func (m *StrIDIn) ValidateAll() error {
	return m.validate(true)
}

func (m *StrIDIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := StrIDInValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StrIDInMultiError(errors)
	}

	return nil
}

// StrIDInMultiError is an error wrapping multiple validation errors returned
// by StrIDIn.ValidateAll() if the designated constraints aren't met.
type StrIDInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrIDInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrIDInMultiError) AllErrors() []error { return m }

// StrIDInValidationError is the validation error returned by StrIDIn.Validate
// if the designated constraints aren't met.
type StrIDInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrIDInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrIDInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrIDInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrIDInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrIDInValidationError) ErrorName() string { return "StrIDInValidationError" }

// Error satisfies the builtin error interface
func (e StrIDInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrIDIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrIDInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrIDInValidationError{}

// Validate checks the field values on NumIDIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumIDIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumIDIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NumIDInMultiError, or nil if none found.
func (m *NumIDIn) ValidateAll() error {
	return m.validate(true)
}

func (m *NumIDIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := NumIDInValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NumIDInMultiError(errors)
	}

	return nil
}

// NumIDInMultiError is an error wrapping multiple validation errors returned
// by NumIDIn.ValidateAll() if the designated constraints aren't met.
type NumIDInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumIDInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumIDInMultiError) AllErrors() []error { return m }

// NumIDInValidationError is the validation error returned by NumIDIn.Validate
// if the designated constraints aren't met.
type NumIDInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumIDInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumIDInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumIDInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumIDInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumIDInValidationError) ErrorName() string { return "NumIDInValidationError" }

// Error satisfies the builtin error interface
func (e NumIDInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumIDIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumIDInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumIDInValidationError{}

// Validate checks the field values on Num with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Num) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Num with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NumMultiError, or nil if none found.
func (m *Num) ValidateAll() error {
	return m.validate(true)
}

func (m *Num) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return NumMultiError(errors)
	}

	return nil
}

// NumMultiError is an error wrapping multiple validation errors returned by
// Num.ValidateAll() if the designated constraints aren't met.
type NumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumMultiError) AllErrors() []error { return m }

// NumValidationError is the validation error returned by Num.Validate if the
// designated constraints aren't met.
type NumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumValidationError) ErrorName() string { return "NumValidationError" }

// Error satisfies the builtin error interface
func (e NumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumValidationError{}

// Validate checks the field values on Bool with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bool with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BoolMultiError, or nil if none found.
func (m *Bool) ValidateAll() error {
	return m.validate(true)
}

func (m *Bool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return BoolMultiError(errors)
	}

	return nil
}

// BoolMultiError is an error wrapping multiple validation errors returned by
// Bool.ValidateAll() if the designated constraints aren't met.
type BoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolMultiError) AllErrors() []error { return m }

// BoolValidationError is the validation error returned by Bool.Validate if the
// designated constraints aren't met.
type BoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolValidationError) ErrorName() string { return "BoolValidationError" }

// Error satisfies the builtin error interface
func (e BoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolValidationError{}

// Validate checks the field values on Str with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Str) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Str with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StrMultiError, or nil if none found.
func (m *Str) ValidateAll() error {
	return m.validate(true)
}

func (m *Str) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return StrMultiError(errors)
	}

	return nil
}

// StrMultiError is an error wrapping multiple validation errors returned by
// Str.ValidateAll() if the designated constraints aren't met.
type StrMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrMultiError) AllErrors() []error { return m }

// StrValidationError is the validation error returned by Str.Validate if the
// designated constraints aren't met.
type StrValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrValidationError) ErrorName() string { return "StrValidationError" }

// Error satisfies the builtin error interface
func (e StrValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrValidationError{}

// Validate checks the field values on StrMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StrMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StrMap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StrMapMultiError, or nil if none found.
func (m *StrMap) ValidateAll() error {
	return m.validate(true)
}

func (m *StrMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return StrMapMultiError(errors)
	}

	return nil
}

// StrMapMultiError is an error wrapping multiple validation errors returned by
// StrMap.ValidateAll() if the designated constraints aren't met.
type StrMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StrMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StrMapMultiError) AllErrors() []error { return m }

// StrMapValidationError is the validation error returned by StrMap.Validate if
// the designated constraints aren't met.
type StrMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StrMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StrMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StrMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StrMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StrMapValidationError) ErrorName() string { return "StrMapValidationError" }

// Error satisfies the builtin error interface
func (e StrMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStrMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StrMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StrMapValidationError{}

// Validate checks the field values on SortOrder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SortOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SortOrderMultiError, or nil
// if none found.
func (m *SortOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *SortOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Order

	if len(errors) > 0 {
		return SortOrderMultiError(errors)
	}

	return nil
}

// SortOrderMultiError is an error wrapping multiple validation errors returned
// by SortOrder.ValidateAll() if the designated constraints aren't met.
type SortOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortOrderMultiError) AllErrors() []error { return m }

// SortOrderValidationError is the validation error returned by
// SortOrder.Validate if the designated constraints aren't met.
type SortOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortOrderValidationError) ErrorName() string { return "SortOrderValidationError" }

// Error satisfies the builtin error interface
func (e SortOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortOrderValidationError{}
